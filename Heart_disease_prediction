import numpy as np
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from colorama import Fore, init

init(autoreset=True)

# Enums
ageEnum = {'SuperSeniorCitizen': 0, 'SeniorCitizen': 1, 'MiddleAged': 2, 'Youth': 3, 'Teen': 4}
genderEnum = {'Male': 0, 'Female': 1}
familyHistoryEnum = {'Yes': 0, 'No': 1}
dietEnum = {'High': 0, 'Medium': 1, 'Low': 2}
lifeStyleEnum = {'Athlete': 0, 'Active': 1, 'Moderate': 2, 'Sedentary': 3}
cholesterolEnum = {'High': 0, 'BorderLine': 1, 'Normal': 2}
heartDiseaseEnum = {'Yes': 0, 'No': 1}

# Add more samples (balanced)
data = np.array([
    [0, 1, 0, 1, 3, 0],  # Yes
    [1, 0, 0, 0, 2, 0],  # Yes
    [2, 0, 0, 0, 3, 0],  # Yes
    [1, 1, 0, 1, 2, 0],  # Yes
    [2, 1, 0, 0, 2, 0],  # Yes
    [3, 0, 1, 2, 1, 1],  # No
    [4, 1, 1, 2, 2, 2],  # No
    [4, 1, 1, 2, 3, 2],  # No
    [3, 1, 1, 2, 3, 1],  # No
    [2, 0, 1, 2, 2, 1]   # No
])
labels = np.array([
    0, 0, 0, 0, 0,
    1, 1, 1, 1, 1
])

# Train-test split with stratification
X_train, X_test, y_train, y_test = train_test_split(
    data, labels, test_size=0.3, stratify=labels, random_state=0)

# Model
model = MultinomialNB()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluation
print("\n" + "="*25 + " Evaluation " + "="*25)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}\n")
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=["HeartDisease-Yes", "HeartDisease-No"]))

# Confusion Matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Predictions
print("\n" + "="*25 + " Predictions " + "="*25)
for i in range(len(X_test)):
    pred = model.predict([X_test[i]])[0]
    actual = y_test[i]
    status = "✅ Correct" if pred == actual else "❌ Wrong"
    print(f"Input: {X_test[i]} | Predicted: {'Yes' if pred==0 else 'No'} | Actual: {'Yes' if actual==0 else 'No'} {status}")

# User input section
while True:
    try:
        print("\n" + "-"*10 + " Check Your Risk for Heart Disease " + "-"*10)
        age = int(input(f"Enter Age {ageEnum}: "))
        gender = int(input(f"Enter Gender {genderEnum}: "))
        family = int(input(f"Family History {familyHistoryEnum}: "))
        diet = int(input(f"Diet {dietEnum}: "))
        lifestyle = int(input(f"Lifestyle {lifeStyleEnum}: "))
        chol = int(input(f"Cholesterol {cholesterolEnum}: "))

        user_data = np.array([[age, gender, family, diet, lifestyle, chol]])
        prob = model.predict_proba(user_data)[0]

        print(f"\n{Fore.GREEN}No Heart Disease Probability: {prob[1]:.2f}")
        print(f"{Fore.RED}Yes Heart Disease Probability: {prob[0]:.2f}")

        print(Fore.YELLOW + f"Final Prediction: {'Yes' if prob[0] > prob[1] else 'No'}")

    except Exception as e:
        print(Fore.RED + f"Error: {e}")

    again = input("Test another input? (y/n): ")
    if again.lower() != 'y':
        break






OUTPUT

========================= Evaluation =========================
Accuracy: 1.00

Classification Report:
                  precision    recall  f1-score   support

HeartDisease-Yes       1.00      1.00      1.00         2
 HeartDisease-No       1.00      1.00      1.00         1

        accuracy                           1.00         3
       macro avg       1.00      1.00      1.00         3
    weighted avg       1.00      1.00      1.00         3

Confusion Matrix:
[[2 0]
 [0 1]]

========================= Predictions =========================
Input: [0 1 0 1 3 0] | Predicted: Yes | Actual: Yes ✅ Correct
Input: [1 1 0 1 2 0] | Predicted: Yes | Actual: Yes ✅ Correct
Input: [4 1 1 2 3 2] | Predicted: No | Actual: No ✅ Correct

---------- Check Your Risk for Heart Disease ----------
Enter Age {'SuperSeniorCitizen': 0, 'SeniorCitizen': 1, 'MiddleAged': 2, 'Youth': 3, 'Teen': 4}:  0
Enter Gender {'Male': 0, 'Female': 1}:  1
Family History {'Yes': 0, 'No': 1}:  0
Diet {'High': 0, 'Medium': 1, 'Low': 2}:  0
Lifestyle {'Athlete': 0, 'Active': 1, 'Moderate': 2, 'Sedentary': 3}:  2
Cholesterol {'High': 0, 'BorderLine': 1, 'Normal': 2}:  0

No Heart Disease Probability: 0.16
Yes Heart Disease Probability: 0.84
Final Prediction: Yes
