
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
from scipy.stats import gaussian_kde

# Set random seed for reproducibility
np.random.seed(42)

# ==== Part 1: KDE-like plot (First Image Style) ====
# Generate 1D bimodal data
data1 = np.concatenate([
    np.random.normal(3, 0.6, 50),
    np.random.normal(7, 0.5, 50)
])

# Kernel Density Estimation
kde1 = gaussian_kde(data1[:50])
kde2 = gaussian_kde(data1[50:])
x_vals = np.linspace(min(data1) - 1, max(data1) + 1, 200)

# Plot KDE curves and points
plt.figure(figsize=(8, 4))
plt.plot(x_vals, kde1(x_vals), label='Cluster 1')
plt.plot(x_vals, kde2(x_vals), label='Cluster 2', color='orange')
plt.scatter(data1, np.zeros_like(data1), color='blue', s=10)
plt.title("Density Estimation Plot")
plt.show()


# ==== Part 2: Elbow Curve (Second Image Style) ====
# Generate 2D data for clustering
X, _ = make_blobs(n_samples=200, centers=3, n_features=2, random_state=42)

# Elbow Method Calculation
scores = []
K = range(1, 5)
for k in K:
    kmeans = KMeans(n_clusters=k, n_init=10, max_iter=300, random_state=42)
    kmeans.fit(X)
    scores.append(-kmeans.inertia_)  # Negative to match your image style (increasing upward)

# Plot the Elbow Curve
plt.figure(figsize=(8, 5))
plt.plot(K, scores, marker='o')
plt.title("Elbow Curve")
plt.xlabel("Number of Clusters")
plt.ylabel("Score")
plt.grid(True, linestyle='--', alpha=0.6)
plt.xticks(K)
plt.show()
